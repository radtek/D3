#ifndef INC_D3RoleBase_H
#define INC_D3RoleBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3Role representing instances of D3MDDB.D3Role.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3RoleBase.h"
//
//       namespace D3
//       {
//         class D3Role : public D3RoleBase
//         {
//           D3_CLASS_DECL(D3Role);
//
//           protected:
//             D3Role() {}
//
//           public:
//             ~D3Role() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3Role::Column() method
	enum D3Role_Fields
	{
		D3Role_ID,
		D3Role_Name,
		D3Role_Enabled,
		D3Role_Features,
		D3Role_IRSSettings,
		D3Role_V3ParamSettings,
		D3Role_T3ParamSettings,
		D3Role_P3ParamSettings
	};


	//! D3RoleBase is a base class that \b MUST be subclassed through a class called \a D3Role.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3Role
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3Role representing rows from the table \a D3MDDB.D3Role.
	*/
	class D3_API D3RoleBase: public Entity
	{
		D3_CLASS_DECL(D3RoleBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3RolePtr               operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }

			//! Enable iterating the relation D3RoleUsers to access related D3RoleUser objects
			class D3_API D3RoleUsers : public Relation
			{
				D3_CLASS_DECL(D3RoleUsers);

				protected:
					D3RoleUsers() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3RoleUserPtr       operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3RoleUserPtr           front();
					//! back() method
					virtual D3RoleUserPtr           back();
			};

			//! Enable iterating the relation D3DatabasePermissions to access related D3DatabasePermission objects
			class D3_API D3DatabasePermissions : public Relation
			{
				D3_CLASS_DECL(D3DatabasePermissions);

				protected:
					D3DatabasePermissions() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3DatabasePermissionPtr operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3DatabasePermissionPtr front();
					//! back() method
					virtual D3DatabasePermissionPtr back();
			};

			//! Enable iterating the relation D3EntityPermissions to access related D3EntityPermission objects
			class D3_API D3EntityPermissions : public Relation
			{
				D3_CLASS_DECL(D3EntityPermissions);

				protected:
					D3EntityPermissions() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3EntityPermissionPtr operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3EntityPermissionPtr   front();
					//! back() method
					virtual D3EntityPermissionPtr   back();
			};

			//! Enable iterating the relation D3ColumnPermissions to access related D3ColumnPermission objects
			class D3_API D3ColumnPermissions : public Relation
			{
				D3_CLASS_DECL(D3ColumnPermissions);

				protected:
					D3ColumnPermissions() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3ColumnPermissionPtr operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3ColumnPermissionPtr   front();
					//! back() method
					virtual D3ColumnPermissionPtr   back();
			};



		protected:
			D3RoleBase() {}

		public:
			~D3RoleBase() {}

			//! Create a new D3Role
			static D3RolePtr                    CreateD3Role(DatabasePtr pDB)		{ return (D3RolePtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3RolePtr                    Load(DatabasePtr pDB, long lID, bool bRefresh = false, bool bLazyFetch = true);


			//! Load all D3RoleUsers objects. The objects loaded are of type D3RoleUser.
			virtual void												LoadAllD3RoleUsers(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3RoleUsers collection which contains objects of type D3RoleUser.
			virtual D3RoleUsers*                GetD3RoleUsers();
			//! Load all D3DatabasePermissions objects. The objects loaded are of type D3DatabasePermission.
			virtual void												LoadAllD3DatabasePermissions(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3DatabasePermissions collection which contains objects of type D3DatabasePermission.
			virtual D3DatabasePermissions*      GetD3DatabasePermissions();
			//! Load all D3EntityPermissions objects. The objects loaded are of type D3EntityPermission.
			virtual void												LoadAllD3EntityPermissions(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3EntityPermissions collection which contains objects of type D3EntityPermission.
			virtual D3EntityPermissions*        GetD3EntityPermissions();
			//! Load all D3ColumnPermissions objects. The objects loaded are of type D3ColumnPermission.
			virtual void												LoadAllD3ColumnPermissions(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3ColumnPermissions collection which contains objects of type D3ColumnPermission.
			virtual D3ColumnPermissions*        GetD3ColumnPermissions();

			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! ID
			virtual long                        GetID()                        { return Column(D3Role_ID)->GetLong(); }
			//! Name
			virtual const std::string&          GetName()                      { return Column(D3Role_Name)->GetString(); }
			//! Enabled
			virtual bool                        GetEnabled()                   { return Column(D3Role_Enabled)->GetBool(); }
			//! Features
			virtual long                        GetFeatures()                  { return Column(D3Role_Features)->GetLong(); }
			//! IRSSettings
			virtual long                        GetIRSSettings()               { return Column(D3Role_IRSSettings)->GetLong(); }
			//! V3ParamSettings
			virtual long                        GetV3ParamSettings()           { return Column(D3Role_V3ParamSettings)->GetLong(); }
			//! T3ParamSettings
			virtual long                        GetT3ParamSettings()           { return Column(D3Role_T3ParamSettings)->GetLong(); }
			//! P3ParamSettings
			virtual long                        GetP3ParamSettings()           { return Column(D3Role_P3ParamSettings)->GetLong(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set ID
			virtual bool												SetID(long val)                { return Column(D3Role_ID)->SetValue(val); }
			//! Set Name
			virtual bool												SetName(const std::string& val){ return Column(D3Role_Name)->SetValue(val); }
			//! Set Enabled
			virtual bool												SetEnabled(bool val)           { return Column(D3Role_Enabled)->SetValue(val); }
			//! Set Features
			virtual bool												SetFeatures(long val)          { return Column(D3Role_Features)->SetValue(val); }
			//! Set IRSSettings
			virtual bool												SetIRSSettings(long val)       { return Column(D3Role_IRSSettings)->SetValue(val); }
			//! Set V3ParamSettings
			virtual bool												SetV3ParamSettings(long val)   { return Column(D3Role_V3ParamSettings)->SetValue(val); }
			//! Set T3ParamSettings
			virtual bool												SetT3ParamSettings(long val)   { return Column(D3Role_T3ParamSettings)->SetValue(val); }
			//! Set P3ParamSettings
			virtual bool												SetP3ParamSettings(long val)   { return Column(D3Role_P3ParamSettings)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3Role_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3RoleBase_H */
