#ifndef INC_D3SessionBase_H
#define INC_D3SessionBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3Session representing instances of D3MDDB.D3Session.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3SessionBase.h"
//
//       namespace D3
//       {
//         class D3Session : public D3SessionBase
//         {
//           D3_CLASS_DECL(D3Session);
//
//           protected:
//             D3Session() {}
//
//           public:
//             ~D3Session() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3Session::Column() method
	enum D3Session_Fields
	{
		D3Session_ID,
		D3Session_RoleUserID,
		D3Session_SignedIn,
		D3Session_SignedOut
	};


	//! D3SessionBase is a base class that \b MUST be subclassed through a class called \a D3Session.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3Session
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3Session representing rows from the table \a D3MDDB.D3Session.
	*/
	class D3_API D3SessionBase: public Entity
	{
		D3_CLASS_DECL(D3SessionBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3SessionPtr            operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }



		protected:
			D3SessionBase() {}

		public:
			~D3SessionBase() {}

			//! Create a new D3Session
			static D3SessionPtr                 CreateD3Session(DatabasePtr pDB)		{ return (D3SessionPtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Session)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3SessionPtr                 Load(DatabasePtr pDB, long lID, bool bRefresh = false, bool bLazyFetch = true);

			//! Get related parent D3RoleUser object
			virtual D3RoleUserPtr               GetD3RoleUser();
			//! Set related parent D3RoleUser object
			virtual void												SetD3RoleUser(D3RoleUserPtr pD3RoleUser);


			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! ID
			virtual long                        GetID()                        { return Column(D3Session_ID)->GetLong(); }
			//! RoleUserID
			virtual long                        GetRoleUserID()                { return Column(D3Session_RoleUserID)->GetLong(); }
			//! SignedIn
			virtual const D3Date&               GetSignedIn()                  { return Column(D3Session_SignedIn)->GetDate(); }
			//! SignedOut
			virtual const D3Date&               GetSignedOut()                 { return Column(D3Session_SignedOut)->GetDate(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set ID
			virtual bool												SetID(long val)                { return Column(D3Session_ID)->SetValue(val); }
			//! Set RoleUserID
			virtual bool												SetRoleUserID(long val)        { return Column(D3Session_RoleUserID)->SetValue(val); }
			//! Set SignedIn
			virtual bool												SetSignedIn(const D3Date& val) { return Column(D3Session_SignedIn)->SetValue(val); }
			//! Set SignedOut
			virtual bool												SetSignedOut(const D3Date& val){ return Column(D3Session_SignedOut)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3Session_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3SessionBase_H */
