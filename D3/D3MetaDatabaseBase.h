#ifndef INC_D3MetaDatabaseBase_H
#define INC_D3MetaDatabaseBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3MetaDatabase representing instances of D3MDDB.D3MetaDatabase.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3MetaDatabaseBase.h"
//
//       namespace D3
//       {
//         class D3MetaDatabase : public D3MetaDatabaseBase
//         {
//           D3_CLASS_DECL(D3MetaDatabase);
//
//           protected:
//             D3MetaDatabase() {}
//
//           public:
//             ~D3MetaDatabase() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3MetaDatabase::Column() method
	enum D3MetaDatabase_Fields
	{
		D3MetaDatabase_ID,
		D3MetaDatabase_Alias,
		D3MetaDatabase_VersionMajor,
		D3MetaDatabase_VersionMinor,
		D3MetaDatabase_VersionRevision,
		D3MetaDatabase_InstanceInterface,
		D3MetaDatabase_ProsaName,
		D3MetaDatabase_Description,
		D3MetaDatabase_Flags,
		D3MetaDatabase_AccessRights
	};


	//! D3MetaDatabaseBase is a base class that \b MUST be subclassed through a class called \a D3MetaDatabase.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3MetaDatabase
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3MetaDatabase representing rows from the table \a D3MDDB.D3MetaDatabase.
	*/
	class D3_API D3MetaDatabaseBase: public Entity
	{
		D3_CLASS_DECL(D3MetaDatabaseBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3MetaDatabasePtr       operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }

			//! Enable iterating the relation D3MetaEntities to access related D3MetaEntity objects
			class D3_API D3MetaEntities : public Relation
			{
				D3_CLASS_DECL(D3MetaEntities);

				protected:
					D3MetaEntities() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3MetaEntityPtr     operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3MetaEntityPtr         front();
					//! back() method
					virtual D3MetaEntityPtr         back();
			};

			//! Enable iterating the relation D3RolePermissions to access related D3DatabasePermission objects
			class D3_API D3RolePermissions : public Relation
			{
				D3_CLASS_DECL(D3RolePermissions);

				protected:
					D3RolePermissions() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3DatabasePermissionPtr operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3DatabasePermissionPtr front();
					//! back() method
					virtual D3DatabasePermissionPtr back();
			};



		protected:
			D3MetaDatabaseBase() {}

		public:
			~D3MetaDatabaseBase() {}

			//! Create a new D3MetaDatabase
			static D3MetaDatabasePtr            CreateD3MetaDatabase(DatabasePtr pDB)		{ return (D3MetaDatabasePtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaDatabase)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3MetaDatabasePtr            Load(DatabasePtr pDB, long lID, bool bRefresh = false, bool bLazyFetch = true);


			//! Load all D3MetaEntities objects. The objects loaded are of type D3MetaEntity.
			virtual void												LoadAllD3MetaEntities(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3MetaEntities collection which contains objects of type D3MetaEntity.
			virtual D3MetaEntities*             GetD3MetaEntities();
			//! Load all D3RolePermissions objects. The objects loaded are of type D3DatabasePermission.
			virtual void												LoadAllD3RolePermissions(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3RolePermissions collection which contains objects of type D3DatabasePermission.
			virtual D3RolePermissions*          GetD3RolePermissions();

			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! ID
			virtual long                        GetID()                        { return Column(D3MetaDatabase_ID)->GetLong(); }
			//! Alias
			virtual const std::string&          GetAlias()                     { return Column(D3MetaDatabase_Alias)->GetString(); }
			//! VersionMajor
			virtual short                       GetVersionMajor()              { return Column(D3MetaDatabase_VersionMajor)->GetShort(); }
			//! VersionMinor
			virtual short                       GetVersionMinor()              { return Column(D3MetaDatabase_VersionMinor)->GetShort(); }
			//! VersionRevision
			virtual short                       GetVersionRevision()           { return Column(D3MetaDatabase_VersionRevision)->GetShort(); }
			//! InstanceInterface
			virtual const std::string&          GetInstanceInterface()         { return Column(D3MetaDatabase_InstanceInterface)->GetString(); }
			//! ProsaName
			virtual const std::string&          GetProsaName()                 { return Column(D3MetaDatabase_ProsaName)->GetString(); }
			//! Description
			virtual const std::string&          GetDescription()               { return Column(D3MetaDatabase_Description)->GetString(); }
			//! Flags
			virtual long                        GetFlags()                     { return Column(D3MetaDatabase_Flags)->GetLong(); }
			//! AccessRights
			virtual long                        GetAccessRights()              { return Column(D3MetaDatabase_AccessRights)->GetLong(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set ID
			virtual bool												SetID(long val)                { return Column(D3MetaDatabase_ID)->SetValue(val); }
			//! Set Alias
			virtual bool												SetAlias(const std::string& val){ return Column(D3MetaDatabase_Alias)->SetValue(val); }
			//! Set VersionMajor
			virtual bool												SetVersionMajor(short val)     { return Column(D3MetaDatabase_VersionMajor)->SetValue(val); }
			//! Set VersionMinor
			virtual bool												SetVersionMinor(short val)     { return Column(D3MetaDatabase_VersionMinor)->SetValue(val); }
			//! Set VersionRevision
			virtual bool												SetVersionRevision(short val)  { return Column(D3MetaDatabase_VersionRevision)->SetValue(val); }
			//! Set InstanceInterface
			virtual bool												SetInstanceInterface(const std::string& val){ return Column(D3MetaDatabase_InstanceInterface)->SetValue(val); }
			//! Set ProsaName
			virtual bool												SetProsaName(const std::string& val){ return Column(D3MetaDatabase_ProsaName)->SetValue(val); }
			//! Set Description
			virtual bool												SetDescription(const std::string& val){ return Column(D3MetaDatabase_Description)->SetValue(val); }
			//! Set Flags
			virtual bool												SetFlags(long val)             { return Column(D3MetaDatabase_Flags)->SetValue(val); }
			//! Set AccessRights
			virtual bool												SetAccessRights(long val)      { return Column(D3MetaDatabase_AccessRights)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3MetaDatabase_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3MetaDatabaseBase_H */
