#ifndef INC_D3RoleUserBase_H
#define INC_D3RoleUserBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3RoleUser representing instances of D3MDDB.D3RoleUser.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3RoleUserBase.h"
//
//       namespace D3
//       {
//         class D3RoleUser : public D3RoleUserBase
//         {
//           D3_CLASS_DECL(D3RoleUser);
//
//           protected:
//             D3RoleUser() {}
//
//           public:
//             ~D3RoleUser() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3RoleUser::Column() method
	enum D3RoleUser_Fields
	{
		D3RoleUser_ID,
		D3RoleUser_RoleID,
		D3RoleUser_UserID
	};


	//! D3RoleUserBase is a base class that \b MUST be subclassed through a class called \a D3RoleUser.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3RoleUser
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3RoleUser representing rows from the table \a D3MDDB.D3RoleUser.
	*/
	class D3_API D3RoleUserBase: public Entity
	{
		D3_CLASS_DECL(D3RoleUserBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3RoleUserPtr           operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }

			//! Enable iterating the relation D3Sessions to access related D3Session objects
			class D3_API D3Sessions : public Relation
			{
				D3_CLASS_DECL(D3Sessions);

				protected:
					D3Sessions() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3SessionPtr        operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3SessionPtr            front();
					//! back() method
					virtual D3SessionPtr            back();
			};



		protected:
			D3RoleUserBase() {}

		public:
			~D3RoleUserBase() {}

			//! Create a new D3RoleUser
			static D3RoleUserPtr                CreateD3RoleUser(DatabasePtr pDB)		{ return (D3RoleUserPtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3RoleUser)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3RoleUserPtr                Load(DatabasePtr pDB, long lID, bool bRefresh = false, bool bLazyFetch = true);

			//! Get related parent D3Role object
			virtual D3RolePtr                   GetD3Role();
			//! Set related parent D3Role object
			virtual void												SetD3Role(D3RolePtr pD3Role);
			//! Get related parent D3User object
			virtual D3UserPtr                   GetD3User();
			//! Set related parent D3User object
			virtual void												SetD3User(D3UserPtr pD3User);

			//! Load all D3Sessions objects. The objects loaded are of type D3Session.
			virtual void												LoadAllD3Sessions(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3Sessions collection which contains objects of type D3Session.
			virtual D3Sessions*                 GetD3Sessions();

			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! ID
			virtual long                        GetID()                        { return Column(D3RoleUser_ID)->GetLong(); }
			//! RoleID
			virtual long                        GetRoleID()                    { return Column(D3RoleUser_RoleID)->GetLong(); }
			//! UserID
			virtual long                        GetUserID()                    { return Column(D3RoleUser_UserID)->GetLong(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set ID
			virtual bool												SetID(long val)                { return Column(D3RoleUser_ID)->SetValue(val); }
			//! Set RoleID
			virtual bool												SetRoleID(long val)            { return Column(D3RoleUser_RoleID)->SetValue(val); }
			//! Set UserID
			virtual bool												SetUserID(long val)            { return Column(D3RoleUser_UserID)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3RoleUser_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3RoleUserBase_H */
