#ifndef INC_D3MetaKeyBase_H
#define INC_D3MetaKeyBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3MetaKey representing instances of D3MDDB.D3MetaKey.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3MetaKeyBase.h"
//
//       namespace D3
//       {
//         class D3MetaKey : public D3MetaKeyBase
//         {
//           D3_CLASS_DECL(D3MetaKey);
//
//           protected:
//             D3MetaKey() {}
//
//           public:
//             ~D3MetaKey() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3MetaKey::Column() method
	enum D3MetaKey_Fields
	{
		D3MetaKey_ID,
		D3MetaKey_MetaEntityID,
		D3MetaKey_SequenceNo,
		D3MetaKey_Name,
		D3MetaKey_ProsaName,
		D3MetaKey_Description,
		D3MetaKey_MetaClass,
		D3MetaKey_InstanceClass,
		D3MetaKey_JSMetaClass,
		D3MetaKey_JSInstanceClass,
		D3MetaKey_JSViewClass,
		D3MetaKey_InstanceInterface,
		D3MetaKey_Flags
	};


	//! D3MetaKeyBase is a base class that \b MUST be subclassed through a class called \a D3MetaKey.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3MetaKey
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3MetaKey representing rows from the table \a D3MDDB.D3MetaKey.
	*/
	class D3_API D3MetaKeyBase: public Entity
	{
		D3_CLASS_DECL(D3MetaKeyBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3MetaKeyPtr            operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }

			//! Enable iterating the relation D3MetaKeyColumns to access related D3MetaKeyColumn objects
			class D3_API D3MetaKeyColumns : public Relation
			{
				D3_CLASS_DECL(D3MetaKeyColumns);

				protected:
					D3MetaKeyColumns() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3MetaKeyColumnPtr  operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3MetaKeyColumnPtr      front();
					//! back() method
					virtual D3MetaKeyColumnPtr      back();
			};

			//! Enable iterating the relation ChildD3MetaRelations to access related D3MetaRelation objects
			class D3_API ChildD3MetaRelations : public Relation
			{
				D3_CLASS_DECL(ChildD3MetaRelations);

				protected:
					ChildD3MetaRelations() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3MetaRelationPtr   operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3MetaRelationPtr       front();
					//! back() method
					virtual D3MetaRelationPtr       back();
			};

			//! Enable iterating the relation ParentD3MetaRelations to access related D3MetaRelation objects
			class D3_API ParentD3MetaRelations : public Relation
			{
				D3_CLASS_DECL(ParentD3MetaRelations);

				protected:
					ParentD3MetaRelations() {}

				public:
					class D3_API iterator : public Relation::iterator
					{
						public:
							iterator() {}
							iterator(const InstanceKeyPtrSetItr& itr) : Relation::iterator(itr) {}

							//! De-reference operator*()
							virtual D3MetaRelationPtr   operator*();
							//! Assignment operator=()
							virtual iterator&           operator=(const iterator& itr);
					};

					//! front() method
					virtual D3MetaRelationPtr       front();
					//! back() method
					virtual D3MetaRelationPtr       back();
			};



		protected:
			D3MetaKeyBase() {}

		public:
			~D3MetaKeyBase() {}

			//! Create a new D3MetaKey
			static D3MetaKeyPtr                 CreateD3MetaKey(DatabasePtr pDB)		{ return (D3MetaKeyPtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaKey)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3MetaKeyPtr                 Load(DatabasePtr pDB, long lID, bool bRefresh = false, bool bLazyFetch = true);

			//! Get related parent D3MetaEntity object
			virtual D3MetaEntityPtr             GetD3MetaEntity();
			//! Set related parent D3MetaEntity object
			virtual void												SetD3MetaEntity(D3MetaEntityPtr pD3MetaEntity);

			//! Load all D3MetaKeyColumns objects. The objects loaded are of type D3MetaKeyColumn.
			virtual void												LoadAllD3MetaKeyColumns(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation D3MetaKeyColumns collection which contains objects of type D3MetaKeyColumn.
			virtual D3MetaKeyColumns*           GetD3MetaKeyColumns();
			//! Load all ChildD3MetaRelations objects. The objects loaded are of type D3MetaRelation.
			virtual void												LoadAllChildD3MetaRelations(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation ChildD3MetaRelations collection which contains objects of type D3MetaRelation.
			virtual ChildD3MetaRelations*       GetChildD3MetaRelations();
			//! Load all ParentD3MetaRelations objects. The objects loaded are of type D3MetaRelation.
			virtual void												LoadAllParentD3MetaRelations(bool bRefresh = false, bool bLazyFetch = true);
			//! Get the relation ParentD3MetaRelations collection which contains objects of type D3MetaRelation.
			virtual ParentD3MetaRelations*      GetParentD3MetaRelations();

			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! ID
			virtual long                        GetID()                        { return Column(D3MetaKey_ID)->GetLong(); }
			//! MetaEntityID
			virtual long                        GetMetaEntityID()              { return Column(D3MetaKey_MetaEntityID)->GetLong(); }
			//! SequenceNo
			virtual float                       GetSequenceNo()                { return Column(D3MetaKey_SequenceNo)->GetFloat(); }
			//! Name
			virtual const std::string&          GetName()                      { return Column(D3MetaKey_Name)->GetString(); }
			//! ProsaName
			virtual const std::string&          GetProsaName()                 { return Column(D3MetaKey_ProsaName)->GetString(); }
			//! Description
			virtual const std::string&          GetDescription()               { return Column(D3MetaKey_Description)->GetString(); }
			//! MetaClass
			virtual const std::string&          GetMetaClass()                 { return Column(D3MetaKey_MetaClass)->GetString(); }
			//! InstanceClass
			virtual const std::string&          GetInstanceClass()             { return Column(D3MetaKey_InstanceClass)->GetString(); }
			//! JSMetaClass
			virtual const std::string&          GetJSMetaClass()               { return Column(D3MetaKey_JSMetaClass)->GetString(); }
			//! JSInstanceClass
			virtual const std::string&          GetJSInstanceClass()           { return Column(D3MetaKey_JSInstanceClass)->GetString(); }
			//! JSViewClass
			virtual const std::string&          GetJSViewClass()               { return Column(D3MetaKey_JSViewClass)->GetString(); }
			//! InstanceInterface
			virtual const std::string&          GetInstanceInterface()         { return Column(D3MetaKey_InstanceInterface)->GetString(); }
			//! Flags
			virtual long                        GetFlags()                     { return Column(D3MetaKey_Flags)->GetLong(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set ID
			virtual bool												SetID(long val)                { return Column(D3MetaKey_ID)->SetValue(val); }
			//! Set MetaEntityID
			virtual bool												SetMetaEntityID(long val)      { return Column(D3MetaKey_MetaEntityID)->SetValue(val); }
			//! Set SequenceNo
			virtual bool												SetSequenceNo(float val)       { return Column(D3MetaKey_SequenceNo)->SetValue(val); }
			//! Set Name
			virtual bool												SetName(const std::string& val){ return Column(D3MetaKey_Name)->SetValue(val); }
			//! Set ProsaName
			virtual bool												SetProsaName(const std::string& val){ return Column(D3MetaKey_ProsaName)->SetValue(val); }
			//! Set Description
			virtual bool												SetDescription(const std::string& val){ return Column(D3MetaKey_Description)->SetValue(val); }
			//! Set MetaClass
			virtual bool												SetMetaClass(const std::string& val){ return Column(D3MetaKey_MetaClass)->SetValue(val); }
			//! Set InstanceClass
			virtual bool												SetInstanceClass(const std::string& val){ return Column(D3MetaKey_InstanceClass)->SetValue(val); }
			//! Set JSMetaClass
			virtual bool												SetJSMetaClass(const std::string& val){ return Column(D3MetaKey_JSMetaClass)->SetValue(val); }
			//! Set JSInstanceClass
			virtual bool												SetJSInstanceClass(const std::string& val){ return Column(D3MetaKey_JSInstanceClass)->SetValue(val); }
			//! Set JSViewClass
			virtual bool												SetJSViewClass(const std::string& val){ return Column(D3MetaKey_JSViewClass)->SetValue(val); }
			//! Set InstanceInterface
			virtual bool												SetInstanceInterface(const std::string& val){ return Column(D3MetaKey_InstanceInterface)->SetValue(val); }
			//! Set Flags
			virtual bool												SetFlags(long val)             { return Column(D3MetaKey_Flags)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3MetaKey_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3MetaKeyBase_H */
