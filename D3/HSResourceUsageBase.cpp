// MODULE: HSResourceUsageBase.cpp
//;
//; IMPLEMENTATION CLASS: HSResourceUsageBase
//;

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can regenerate this file.
//

#include "D3Types.h"

#include "HSResourceUsageBase.h"

// Dependent includes
//
#include "HSResourceBase.h"
#include "HSTopicBase.h"


namespace D3
{

	// =====================================================================================
	// Class HSResourceUsageBase Implementation
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(HSResourceUsageBase, Entity);


	// Get a collection reflecting all currently resident instances of this
	//
	/* static */
	InstanceKeyPtrSetPtr HSResourceUsageBase::GetAll(DatabasePtr pDB)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3HSDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3HSDB"));

		if (!pDatabase)
			return NULL;

		return pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResourceUsage)->GetPrimaryMetaKey()->GetInstanceKeySet(pDatabase);
	}



	// Make all objects of this type memory resident
	//
	/* static */
	void HSResourceUsageBase::LoadAll(DatabasePtr pDB, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3HSDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3HSDB"));

		if (!pDatabase)
			return;

		pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResourceUsage)->LoadAll(pDatabase, bRefresh, bLazyFetch);
	}



	// Make a specific instance resident
	//
	/* static */
	HSResourceUsagePtr HSResourceUsageBase::Load(DatabasePtr pDB, long lTopicID, long lResourceID, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3HSDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3HSDB"));

		if (!pDatabase)
			return NULL;

		TemporaryKey	tmpKey(*(pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResourceUsage)->GetPrimaryMetaKey()));

		// Set all key column values
		//
		tmpKey.GetColumn(D3HSDB_HSResourceUsage_TopicID)->SetValue(lTopicID);
		tmpKey.GetColumn(D3HSDB_HSResourceUsage_ResourceID)->SetValue(lResourceID);

		return (HSResourceUsagePtr) pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResourceUsage)->GetPrimaryMetaKey()->LoadObject(&tmpKey, pDatabase, bRefresh, bLazyFetch);
	}



	// Get parent of relation Topic
	//
	HSTopicPtr HSResourceUsageBase::GetTopic()
	{
		RelationPtr		pRelation;

		pRelation = GetParentRelation(D3HSDB_HSResourceUsage_PR_Topic);

		if (!pRelation)
			return NULL;

		return (HSTopicPtr) pRelation->GetParent();
	}



	// Set parent of relation Topic
	//
	void HSResourceUsageBase::SetTopic(HSTopicPtr pParent)
	{
		SetParent(m_pMetaEntity->GetParentMetaRelation(D3HSDB_HSResourceUsage_PR_Topic), (EntityPtr) pParent);
	}



	// Get parent of relation Resource
	//
	HSResourcePtr HSResourceUsageBase::GetResource()
	{
		RelationPtr		pRelation;

		pRelation = GetParentRelation(D3HSDB_HSResourceUsage_PR_Resource);

		if (!pRelation)
			return NULL;

		return (HSResourcePtr) pRelation->GetParent();
	}



	// Set parent of relation Resource
	//
	void HSResourceUsageBase::SetResource(HSResourcePtr pParent)
	{
		SetParent(m_pMetaEntity->GetParentMetaRelation(D3HSDB_HSResourceUsage_PR_Resource), (EntityPtr) pParent);
	}





	// =====================================================================================
	// Class HSResourceUsageBase::iterator Implementation
	//

	// De-reference operator*()
	//
	HSResourceUsagePtr HSResourceUsageBase::iterator::operator*()
	{
		InstanceKeyPtr pKey;
		EntityPtr      pEntity;

		pKey = (InstanceKeyPtr) ((InstanceKeyPtrSetItr*) this)->operator*();
		pEntity = pKey->GetEntity();

		return (HSResourceUsagePtr) pEntity;
	}



	// Assignment operator=()
	//
	HSResourceUsageBase::iterator& HSResourceUsageBase::iterator::operator=(const iterator& itr)
	{
		((InstanceKeyPtrSetItr*) this)->operator=(itr);

		return *this;
	}




} // end namespace D3
