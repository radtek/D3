// MODULE: D3UserBase.cpp
//;
//; IMPLEMENTATION CLASS: D3UserBase
//;

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can regenerate this file.
//

#include "D3Types.h"

#include "D3UserBase.h"

// Dependent includes
//
#include "D3HistoricPasswordBase.h"
#include "D3RoleUserBase.h"
#include "D3RowLevelPermissionBase.h"


namespace D3
{

	// =====================================================================================
	// Class D3UserBase Implementation
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3UserBase, Entity);


	// Get a collection reflecting all currently resident instances of this
	//
	/* static */
	InstanceKeyPtrSetPtr D3UserBase::GetAll(DatabasePtr pDB)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return NULL;

		return pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetPrimaryMetaKey()->GetInstanceKeySet(pDatabase);
	}



	// Make all objects of this type memory resident
	//
	/* static */
	void D3UserBase::LoadAll(DatabasePtr pDB, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return;

		pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->LoadAll(pDatabase, bRefresh, bLazyFetch);
	}



	// Make a specific instance resident
	//
	/* static */
	D3UserPtr D3UserBase::Load(DatabasePtr pDB, long lID, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return NULL;

		TemporaryKey	tmpKey(*(pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetPrimaryMetaKey()));

		// Set all key column values
		//
		tmpKey.GetColumn(D3MDDB_D3User_ID)->SetValue(lID);

		return (D3UserPtr) pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetPrimaryMetaKey()->LoadObject(&tmpKey, pDatabase, bRefresh, bLazyFetch);
	}



	// Load all instances of relation D3RoleUsers
	//
	void D3UserBase::LoadAllD3RoleUsers(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetChildMetaRelation(D3MDDB_D3User_CR_D3RoleUsers));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3RoleUsers
	//
	D3UserBase::D3RoleUsers* D3UserBase::GetD3RoleUsers()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetChildMetaRelation(D3MDDB_D3User_CR_D3RoleUsers));

		return (D3UserBase::D3RoleUsers*) pRelation;
	}



	// Load all instances of relation D3RowLevelPermissions
	//
	void D3UserBase::LoadAllD3RowLevelPermissions(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetChildMetaRelation(D3MDDB_D3User_CR_D3RowLevelPermissions));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3RowLevelPermissions
	//
	D3UserBase::D3RowLevelPermissions* D3UserBase::GetD3RowLevelPermissions()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetChildMetaRelation(D3MDDB_D3User_CR_D3RowLevelPermissions));

		return (D3UserBase::D3RowLevelPermissions*) pRelation;
	}



	// Load all instances of relation D3HistoricPasswords
	//
	void D3UserBase::LoadAllD3HistoricPasswords(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetChildMetaRelation(D3MDDB_D3User_CR_D3HistoricPasswords));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3HistoricPasswords
	//
	D3UserBase::D3HistoricPasswords* D3UserBase::GetD3HistoricPasswords()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3User)->GetChildMetaRelation(D3MDDB_D3User_CR_D3HistoricPasswords));

		return (D3UserBase::D3HistoricPasswords*) pRelation;
	}





	// =====================================================================================
	// Class D3UserBase::iterator Implementation
	//

	// De-reference operator*()
	//
	D3UserPtr D3UserBase::iterator::operator*()
	{
		InstanceKeyPtr pKey;
		EntityPtr      pEntity;

		pKey = (InstanceKeyPtr) ((InstanceKeyPtrSetItr*) this)->operator*();
		pEntity = pKey->GetEntity();

		return (D3UserPtr) pEntity;
	}



	// Assignment operator=()
	//
	D3UserBase::iterator& D3UserBase::iterator::operator=(const iterator& itr)
	{
		((InstanceKeyPtrSetItr*) this)->operator=(itr);

		return *this;
	}





	// =====================================================================================
	// Class D3UserBase::D3RoleUsers
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3UserBase::D3RoleUsers, Relation);

	// De-reference operator*()
	//
	D3RoleUserPtr D3UserBase::D3RoleUsers::iterator::operator*()
	{
		return (D3RoleUserPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3UserBase::D3RoleUsers::iterator& D3UserBase::D3RoleUsers::iterator::operator=(const iterator& itr)
	{
		return (D3UserBase::D3RoleUsers::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3RoleUserPtr D3UserBase::D3RoleUsers::front()
	{
		return (D3RoleUserPtr) Relation::front();
	}



	// back() method
	//
	D3RoleUserPtr D3UserBase::D3RoleUsers::back()
	{
		return (D3RoleUserPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3UserBase::D3RowLevelPermissions
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3UserBase::D3RowLevelPermissions, Relation);

	// De-reference operator*()
	//
	D3RowLevelPermissionPtr D3UserBase::D3RowLevelPermissions::iterator::operator*()
	{
		return (D3RowLevelPermissionPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3UserBase::D3RowLevelPermissions::iterator& D3UserBase::D3RowLevelPermissions::iterator::operator=(const iterator& itr)
	{
		return (D3UserBase::D3RowLevelPermissions::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3RowLevelPermissionPtr D3UserBase::D3RowLevelPermissions::front()
	{
		return (D3RowLevelPermissionPtr) Relation::front();
	}



	// back() method
	//
	D3RowLevelPermissionPtr D3UserBase::D3RowLevelPermissions::back()
	{
		return (D3RowLevelPermissionPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3UserBase::D3HistoricPasswords
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3UserBase::D3HistoricPasswords, Relation);

	// De-reference operator*()
	//
	D3HistoricPasswordPtr D3UserBase::D3HistoricPasswords::iterator::operator*()
	{
		return (D3HistoricPasswordPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3UserBase::D3HistoricPasswords::iterator& D3UserBase::D3HistoricPasswords::iterator::operator=(const iterator& itr)
	{
		return (D3UserBase::D3HistoricPasswords::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3HistoricPasswordPtr D3UserBase::D3HistoricPasswords::front()
	{
		return (D3HistoricPasswordPtr) Relation::front();
	}



	// back() method
	//
	D3HistoricPasswordPtr D3UserBase::D3HistoricPasswords::back()
	{
		return (D3HistoricPasswordPtr) Relation::back();
	}




} // end namespace D3
