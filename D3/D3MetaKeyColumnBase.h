#ifndef INC_D3MetaKeyColumnBase_H
#define INC_D3MetaKeyColumnBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3MetaKeyColumn representing instances of D3MDDB.D3MetaKeyColumn.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3MetaKeyColumnBase.h"
//
//       namespace D3
//       {
//         class D3MetaKeyColumn : public D3MetaKeyColumnBase
//         {
//           D3_CLASS_DECL(D3MetaKeyColumn);
//
//           protected:
//             D3MetaKeyColumn() {}
//
//           public:
//             ~D3MetaKeyColumn() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3MetaKeyColumn::Column() method
	enum D3MetaKeyColumn_Fields
	{
		D3MetaKeyColumn_MetaKeyID,
		D3MetaKeyColumn_SequenceNo,
		D3MetaKeyColumn_MetaColumnID
	};


	//! D3MetaKeyColumnBase is a base class that \b MUST be subclassed through a class called \a D3MetaKeyColumn.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3MetaKeyColumn
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3MetaKeyColumn representing rows from the table \a D3MDDB.D3MetaKeyColumn.
	*/
	class D3_API D3MetaKeyColumnBase: public Entity
	{
		D3_CLASS_DECL(D3MetaKeyColumnBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3MetaKeyColumnPtr      operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }



		protected:
			D3MetaKeyColumnBase() {}

		public:
			~D3MetaKeyColumnBase() {}

			//! Create a new D3MetaKeyColumn
			static D3MetaKeyColumnPtr           CreateD3MetaKeyColumn(DatabasePtr pDB)		{ return (D3MetaKeyColumnPtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaKeyColumn)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3MetaKeyColumnPtr           Load(DatabasePtr pDB, long lMetaKeyID, float fSequenceNo, long lMetaColumnID, bool bRefresh = false, bool bLazyFetch = true);

			//! Get related parent D3MetaColumn object
			virtual D3MetaColumnPtr             GetD3MetaColumn();
			//! Set related parent D3MetaColumn object
			virtual void												SetD3MetaColumn(D3MetaColumnPtr pD3MetaColumn);
			//! Get related parent D3MetaKey object
			virtual D3MetaKeyPtr                GetD3MetaKey();
			//! Set related parent D3MetaKey object
			virtual void												SetD3MetaKey(D3MetaKeyPtr pD3MetaKey);


			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! MetaKeyID
			virtual long                        GetMetaKeyID()                 { return Column(D3MetaKeyColumn_MetaKeyID)->GetLong(); }
			//! SequenceNo
			virtual float                       GetSequenceNo()                { return Column(D3MetaKeyColumn_SequenceNo)->GetFloat(); }
			//! MetaColumnID
			virtual long                        GetMetaColumnID()              { return Column(D3MetaKeyColumn_MetaColumnID)->GetLong(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set MetaKeyID
			virtual bool												SetMetaKeyID(long val)         { return Column(D3MetaKeyColumn_MetaKeyID)->SetValue(val); }
			//! Set SequenceNo
			virtual bool												SetSequenceNo(float val)       { return Column(D3MetaKeyColumn_SequenceNo)->SetValue(val); }
			//! Set MetaColumnID
			virtual bool												SetMetaColumnID(long val)      { return Column(D3MetaKeyColumn_MetaColumnID)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3MetaKeyColumn_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3MetaKeyColumnBase_H */
