// MODULE: D3RoleBase.cpp
//;
//; IMPLEMENTATION CLASS: D3RoleBase
//;

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can regenerate this file.
//

#include "D3Types.h"

#include "D3RoleBase.h"

// Dependent includes
//
#include "D3ColumnPermissionBase.h"
#include "D3DatabasePermissionBase.h"
#include "D3EntityPermissionBase.h"
#include "D3RoleUserBase.h"


namespace D3
{

	// =====================================================================================
	// Class D3RoleBase Implementation
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3RoleBase, Entity);


	// Get a collection reflecting all currently resident instances of this
	//
	/* static */
	InstanceKeyPtrSetPtr D3RoleBase::GetAll(DatabasePtr pDB)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return NULL;

		return pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetPrimaryMetaKey()->GetInstanceKeySet(pDatabase);
	}



	// Make all objects of this type memory resident
	//
	/* static */
	void D3RoleBase::LoadAll(DatabasePtr pDB, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return;

		pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->LoadAll(pDatabase, bRefresh, bLazyFetch);
	}



	// Make a specific instance resident
	//
	/* static */
	D3RolePtr D3RoleBase::Load(DatabasePtr pDB, long lID, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return NULL;

		TemporaryKey	tmpKey(*(pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetPrimaryMetaKey()));

		// Set all key column values
		//
		tmpKey.GetColumn(D3MDDB_D3Role_ID)->SetValue(lID);

		return (D3RolePtr) pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetPrimaryMetaKey()->LoadObject(&tmpKey, pDatabase, bRefresh, bLazyFetch);
	}



	// Load all instances of relation D3RoleUsers
	//
	void D3RoleBase::LoadAllD3RoleUsers(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3RoleUsers));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3RoleUsers
	//
	D3RoleBase::D3RoleUsers* D3RoleBase::GetD3RoleUsers()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3RoleUsers));

		return (D3RoleBase::D3RoleUsers*) pRelation;
	}



	// Load all instances of relation D3DatabasePermissions
	//
	void D3RoleBase::LoadAllD3DatabasePermissions(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3DatabasePermissions));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3DatabasePermissions
	//
	D3RoleBase::D3DatabasePermissions* D3RoleBase::GetD3DatabasePermissions()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3DatabasePermissions));

		return (D3RoleBase::D3DatabasePermissions*) pRelation;
	}



	// Load all instances of relation D3EntityPermissions
	//
	void D3RoleBase::LoadAllD3EntityPermissions(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3EntityPermissions));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3EntityPermissions
	//
	D3RoleBase::D3EntityPermissions* D3RoleBase::GetD3EntityPermissions()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3EntityPermissions));

		return (D3RoleBase::D3EntityPermissions*) pRelation;
	}



	// Load all instances of relation D3ColumnPermissions
	//
	void D3RoleBase::LoadAllD3ColumnPermissions(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3ColumnPermissions));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3ColumnPermissions
	//
	D3RoleBase::D3ColumnPermissions* D3RoleBase::GetD3ColumnPermissions()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3Role)->GetChildMetaRelation(D3MDDB_D3Role_CR_D3ColumnPermissions));

		return (D3RoleBase::D3ColumnPermissions*) pRelation;
	}





	// =====================================================================================
	// Class D3RoleBase::iterator Implementation
	//

	// De-reference operator*()
	//
	D3RolePtr D3RoleBase::iterator::operator*()
	{
		InstanceKeyPtr pKey;
		EntityPtr      pEntity;

		pKey = (InstanceKeyPtr) ((InstanceKeyPtrSetItr*) this)->operator*();
		pEntity = pKey->GetEntity();

		return (D3RolePtr) pEntity;
	}



	// Assignment operator=()
	//
	D3RoleBase::iterator& D3RoleBase::iterator::operator=(const iterator& itr)
	{
		((InstanceKeyPtrSetItr*) this)->operator=(itr);

		return *this;
	}





	// =====================================================================================
	// Class D3RoleBase::D3RoleUsers
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3RoleBase::D3RoleUsers, Relation);

	// De-reference operator*()
	//
	D3RoleUserPtr D3RoleBase::D3RoleUsers::iterator::operator*()
	{
		return (D3RoleUserPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3RoleBase::D3RoleUsers::iterator& D3RoleBase::D3RoleUsers::iterator::operator=(const iterator& itr)
	{
		return (D3RoleBase::D3RoleUsers::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3RoleUserPtr D3RoleBase::D3RoleUsers::front()
	{
		return (D3RoleUserPtr) Relation::front();
	}



	// back() method
	//
	D3RoleUserPtr D3RoleBase::D3RoleUsers::back()
	{
		return (D3RoleUserPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3RoleBase::D3DatabasePermissions
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3RoleBase::D3DatabasePermissions, Relation);

	// De-reference operator*()
	//
	D3DatabasePermissionPtr D3RoleBase::D3DatabasePermissions::iterator::operator*()
	{
		return (D3DatabasePermissionPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3RoleBase::D3DatabasePermissions::iterator& D3RoleBase::D3DatabasePermissions::iterator::operator=(const iterator& itr)
	{
		return (D3RoleBase::D3DatabasePermissions::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3DatabasePermissionPtr D3RoleBase::D3DatabasePermissions::front()
	{
		return (D3DatabasePermissionPtr) Relation::front();
	}



	// back() method
	//
	D3DatabasePermissionPtr D3RoleBase::D3DatabasePermissions::back()
	{
		return (D3DatabasePermissionPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3RoleBase::D3EntityPermissions
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3RoleBase::D3EntityPermissions, Relation);

	// De-reference operator*()
	//
	D3EntityPermissionPtr D3RoleBase::D3EntityPermissions::iterator::operator*()
	{
		return (D3EntityPermissionPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3RoleBase::D3EntityPermissions::iterator& D3RoleBase::D3EntityPermissions::iterator::operator=(const iterator& itr)
	{
		return (D3RoleBase::D3EntityPermissions::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3EntityPermissionPtr D3RoleBase::D3EntityPermissions::front()
	{
		return (D3EntityPermissionPtr) Relation::front();
	}



	// back() method
	//
	D3EntityPermissionPtr D3RoleBase::D3EntityPermissions::back()
	{
		return (D3EntityPermissionPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3RoleBase::D3ColumnPermissions
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3RoleBase::D3ColumnPermissions, Relation);

	// De-reference operator*()
	//
	D3ColumnPermissionPtr D3RoleBase::D3ColumnPermissions::iterator::operator*()
	{
		return (D3ColumnPermissionPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3RoleBase::D3ColumnPermissions::iterator& D3RoleBase::D3ColumnPermissions::iterator::operator=(const iterator& itr)
	{
		return (D3RoleBase::D3ColumnPermissions::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3ColumnPermissionPtr D3RoleBase::D3ColumnPermissions::front()
	{
		return (D3ColumnPermissionPtr) Relation::front();
	}



	// back() method
	//
	D3ColumnPermissionPtr D3RoleBase::D3ColumnPermissions::back()
	{
		return (D3ColumnPermissionPtr) Relation::back();
	}




} // end namespace D3
