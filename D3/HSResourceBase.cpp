// MODULE: HSResourceBase.cpp
//;
//; IMPLEMENTATION CLASS: HSResourceBase
//;

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can regenerate this file.
//

#include "D3Types.h"

#include "HSResourceBase.h"

// Dependent includes
//
#include "HSResourceUsageBase.h"


namespace D3
{

	// =====================================================================================
	// Class HSResourceBase Implementation
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(HSResourceBase, Entity);


	// Get a collection reflecting all currently resident instances of this
	//
	/* static */
	InstanceKeyPtrSetPtr HSResourceBase::GetAll(DatabasePtr pDB)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3HSDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3HSDB"));

		if (!pDatabase)
			return NULL;

		return pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResource)->GetPrimaryMetaKey()->GetInstanceKeySet(pDatabase);
	}



	// Make all objects of this type memory resident
	//
	/* static */
	void HSResourceBase::LoadAll(DatabasePtr pDB, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3HSDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3HSDB"));

		if (!pDatabase)
			return;

		pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResource)->LoadAll(pDatabase, bRefresh, bLazyFetch);
	}



	// Make a specific instance resident
	//
	/* static */
	HSResourcePtr HSResourceBase::Load(DatabasePtr pDB, long lID, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3HSDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3HSDB"));

		if (!pDatabase)
			return NULL;

		TemporaryKey	tmpKey(*(pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResource)->GetPrimaryMetaKey()));

		// Set all key column values
		//
		tmpKey.GetColumn(D3HSDB_HSResource_ID)->SetValue(lID);

		return (HSResourcePtr) pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResource)->GetPrimaryMetaKey()->LoadObject(&tmpKey, pDatabase, bRefresh, bLazyFetch);
	}



	// Load all instances of relation ResourceUsages
	//
	void HSResourceBase::LoadAllResourceUsages(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResource)->GetChildMetaRelation(D3HSDB_HSResource_CR_ResourceUsages));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation ResourceUsages
	//
	HSResourceBase::ResourceUsages* HSResourceBase::GetResourceUsages()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3HSDB_HSResource)->GetChildMetaRelation(D3HSDB_HSResource_CR_ResourceUsages));

		return (HSResourceBase::ResourceUsages*) pRelation;
	}





	// =====================================================================================
	// Class HSResourceBase::iterator Implementation
	//

	// De-reference operator*()
	//
	HSResourcePtr HSResourceBase::iterator::operator*()
	{
		InstanceKeyPtr pKey;
		EntityPtr      pEntity;

		pKey = (InstanceKeyPtr) ((InstanceKeyPtrSetItr*) this)->operator*();
		pEntity = pKey->GetEntity();

		return (HSResourcePtr) pEntity;
	}



	// Assignment operator=()
	//
	HSResourceBase::iterator& HSResourceBase::iterator::operator=(const iterator& itr)
	{
		((InstanceKeyPtrSetItr*) this)->operator=(itr);

		return *this;
	}





	// =====================================================================================
	// Class HSResourceBase::ResourceUsages
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(HSResourceBase::ResourceUsages, Relation);

	// De-reference operator*()
	//
	HSResourceUsagePtr HSResourceBase::ResourceUsages::iterator::operator*()
	{
		return (HSResourceUsagePtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	HSResourceBase::ResourceUsages::iterator& HSResourceBase::ResourceUsages::iterator::operator=(const iterator& itr)
	{
		return (HSResourceBase::ResourceUsages::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	HSResourceUsagePtr HSResourceBase::ResourceUsages::front()
	{
		return (HSResourceUsagePtr) Relation::front();
	}



	// back() method
	//
	HSResourceUsagePtr HSResourceBase::ResourceUsages::back()
	{
		return (HSResourceUsagePtr) Relation::back();
	}




} // end namespace D3
