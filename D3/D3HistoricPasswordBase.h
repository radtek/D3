#ifndef INC_D3HistoricPasswordBase_H
#define INC_D3HistoricPasswordBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3HistoricPassword representing instances of D3MDDB.D3HistoricPassword.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3HistoricPasswordBase.h"
//
//       namespace D3
//       {
//         class D3HistoricPassword : public D3HistoricPasswordBase
//         {
//           D3_CLASS_DECL(D3HistoricPassword);
//
//           protected:
//             D3HistoricPassword() {}
//
//           public:
//             ~D3HistoricPassword() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3HistoricPassword::Column() method
	enum D3HistoricPassword_Fields
	{
		D3HistoricPassword_UserID,
		D3HistoricPassword_Password,
		D3HistoricPassword_PWDExpired
	};


	//! D3HistoricPasswordBase is a base class that \b MUST be subclassed through a class called \a D3HistoricPassword.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3HistoricPassword
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3HistoricPassword representing rows from the table \a D3MDDB.D3HistoricPassword.
	*/
	class D3_API D3HistoricPasswordBase: public Entity
	{
		D3_CLASS_DECL(D3HistoricPasswordBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3HistoricPasswordPtr   operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }



		protected:
			D3HistoricPasswordBase() {}

		public:
			~D3HistoricPasswordBase() {}

			//! Create a new D3HistoricPassword
			static D3HistoricPasswordPtr        CreateD3HistoricPassword(DatabasePtr pDB)		{ return (D3HistoricPasswordPtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3HistoricPassword)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3HistoricPasswordPtr        Load(DatabasePtr pDB, long lUserID, const D3Date& dPWDExpired, const Data& bPassword, bool bRefresh = false, bool bLazyFetch = true);

			//! Get related parent D3User object
			virtual D3UserPtr                   GetD3User();
			//! Set related parent D3User object
			virtual void												SetD3User(D3UserPtr pD3User);


			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! UserID
			virtual long                        GetUserID()                    { return Column(D3HistoricPassword_UserID)->GetLong(); }
			//! Password
			virtual const Data&                 GetPassword()                  { return Column(D3HistoricPassword_Password)->GetData(); }
			//! PWDExpired
			virtual const D3Date&               GetPWDExpired()                { return Column(D3HistoricPassword_PWDExpired)->GetDate(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set UserID
			virtual bool												SetUserID(long val)            { return Column(D3HistoricPassword_UserID)->SetValue(val); }
			//! Set Password
			virtual bool												SetPassword(const Data& val)   { return Column(D3HistoricPassword_Password)->SetValue(val); }
			//! Set PWDExpired
			virtual bool												SetPWDExpired(const D3Date& val){ return Column(D3HistoricPassword_PWDExpired)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3HistoricPassword_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3HistoricPasswordBase_H */
