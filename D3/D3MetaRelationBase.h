#ifndef INC_D3MetaRelationBase_H
#define INC_D3MetaRelationBase_H

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can gegenerate this file.
//
// The file declares methods which simplify client interactions with objects of type 
// D3MetaRelation representing instances of D3MDDB.D3MetaRelation.
//
//       For D3 to work correctly, you must implement your own class as follows:
//
//       #include "D3MetaRelationBase.h"
//
//       namespace D3
//       {
//         class D3MetaRelation : public D3MetaRelationBase
//         {
//           D3_CLASS_DECL(D3MetaRelation);
//
//           protected:
//             D3MetaRelation() {}
//
//           public:
//             ~D3MetaRelation() {}
//
//             // Insert your specialised member functions here...
//
//         };
//       } // end namespace D3
//

#include "Entity.h"
#include "Column.h"
#include "Key.h"
#include "Relation.h"
#include "D3MDDB.h"

namespace D3
{

	//! Use these enums to access columns through D3MetaRelation::Column() method
	enum D3MetaRelation_Fields
	{
		D3MetaRelation_ID,
		D3MetaRelation_ParentKeyID,
		D3MetaRelation_ChildKeyID,
		D3MetaRelation_ParentEntityID,
		D3MetaRelation_SequenceNo,
		D3MetaRelation_Name,
		D3MetaRelation_ProsaName,
		D3MetaRelation_Description,
		D3MetaRelation_ReverseName,
		D3MetaRelation_ReverseProsaName,
		D3MetaRelation_ReverseDescription,
		D3MetaRelation_MetaClass,
		D3MetaRelation_InstanceClass,
		D3MetaRelation_InstanceInterface,
		D3MetaRelation_JSMetaClass,
		D3MetaRelation_JSInstanceClass,
		D3MetaRelation_JSParentViewClass,
		D3MetaRelation_JSChildViewClass,
		D3MetaRelation_Flags,
		D3MetaRelation_SwitchColumnID,
		D3MetaRelation_SwitchColumnValue
	};


	//! D3MetaRelationBase is a base class that \b MUST be subclassed through a class called \a D3MetaRelation.
	/*! The purpose of this class to provide more natural access to related objects as well as this' columns.
			This class is only usefull if it is subclassed by a class called D3MetaRelation
			Equally important is that the meta dictionary knows of the existence of your subclass as well as
			specialised Relation classes implemented herein. Only once these details have been added to the
			dictionary will D3 instantiate objects of type \a D3MetaRelation representing rows from the table \a D3MDDB.D3MetaRelation.
	*/
	class D3_API D3MetaRelationBase: public Entity
	{
		D3_CLASS_DECL(D3MetaRelationBase);

		public:
			//! Enable iterating over all instances of this
			class D3_API iterator : public InstanceKeyPtrSetItr
			{
				public:
					iterator() {}
					iterator(const InstanceKeyPtrSetItr& itr) : InstanceKeyPtrSetItr(itr) {}

					//! De-reference operator*()
					virtual D3MetaRelationPtr       operator*();
					//! Assignment operator=()
					virtual iterator&               operator=(const iterator& itr);
			};

			static unsigned int                 size(DatabasePtr pDB)         { return GetAll(pDB)->size(); }
			static bool                         empty(DatabasePtr pDB)        { return GetAll(pDB)->empty(); }
			static iterator                     begin(DatabasePtr pDB)        { return iterator(GetAll(pDB)->begin()); }
			static iterator                     end(DatabasePtr pDB)          { return iterator(GetAll(pDB)->end()); }



		protected:
			D3MetaRelationBase() {}

		public:
			~D3MetaRelationBase() {}

			//! Create a new D3MetaRelation
			static D3MetaRelationPtr            CreateD3MetaRelation(DatabasePtr pDB)		{ return (D3MetaRelationPtr) pDB->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaRelation)->CreateInstance(pDB); }

			//! Return a collection of all instances of this
			static InstanceKeyPtrSetPtr					GetAll(DatabasePtr pDB);

			//! Load all instances of this
			static void													LoadAll(DatabasePtr pDB, bool bRefresh = false, bool bLazyFetch = true);

			//! Load a particular instance of this
			static D3MetaRelationPtr            Load(DatabasePtr pDB, long lID, bool bRefresh = false, bool bLazyFetch = true);

			//! Get related parent D3MetaEntity object
			virtual D3MetaEntityPtr             GetParentD3MetaEntity();
			//! Set related parent D3MetaEntity object
			virtual void												SetParentD3MetaEntity(D3MetaEntityPtr pD3MetaEntity);
			//! Get related parent D3MetaKey object
			virtual D3MetaKeyPtr                GetParentD3MetaKey();
			//! Set related parent D3MetaKey object
			virtual void												SetParentD3MetaKey(D3MetaKeyPtr pD3MetaKey);
			//! Get related parent D3MetaKey object
			virtual D3MetaKeyPtr                GetChildD3MetaKey();
			//! Set related parent D3MetaKey object
			virtual void												SetChildD3MetaKey(D3MetaKeyPtr pD3MetaKey);
			//! Get related parent D3MetaColumn object
			virtual D3MetaColumnPtr             GetSwitchD3MetaColumn();
			//! Set related parent D3MetaColumn object
			virtual void												SetSwitchD3MetaColumn(D3MetaColumnPtr pD3MetaColumn);


			/*! @name Get Column Values
			    \note These accessors do not throw even if the column's value is NULL.
			           Therefore, you should use these methods only if you're sure the
			           column's value is NOT NULL before using these.
			*/
			//@{
			//! ID
			virtual long                        GetID()                        { return Column(D3MetaRelation_ID)->GetLong(); }
			//! ParentKeyID
			virtual long                        GetParentKeyID()               { return Column(D3MetaRelation_ParentKeyID)->GetLong(); }
			//! ChildKeyID
			virtual long                        GetChildKeyID()                { return Column(D3MetaRelation_ChildKeyID)->GetLong(); }
			//! ParentEntityID
			virtual long                        GetParentEntityID()            { return Column(D3MetaRelation_ParentEntityID)->GetLong(); }
			//! SequenceNo
			virtual float                       GetSequenceNo()                { return Column(D3MetaRelation_SequenceNo)->GetFloat(); }
			//! Name
			virtual const std::string&          GetName()                      { return Column(D3MetaRelation_Name)->GetString(); }
			//! ProsaName
			virtual const std::string&          GetProsaName()                 { return Column(D3MetaRelation_ProsaName)->GetString(); }
			//! Description
			virtual const std::string&          GetDescription()               { return Column(D3MetaRelation_Description)->GetString(); }
			//! ReverseName
			virtual const std::string&          GetReverseName()               { return Column(D3MetaRelation_ReverseName)->GetString(); }
			//! ReverseProsaName
			virtual const std::string&          GetReverseProsaName()          { return Column(D3MetaRelation_ReverseProsaName)->GetString(); }
			//! ReverseDescription
			virtual const std::string&          GetReverseDescription()        { return Column(D3MetaRelation_ReverseDescription)->GetString(); }
			//! MetaClass
			virtual const std::string&          GetMetaClass()                 { return Column(D3MetaRelation_MetaClass)->GetString(); }
			//! InstanceClass
			virtual const std::string&          GetInstanceClass()             { return Column(D3MetaRelation_InstanceClass)->GetString(); }
			//! InstanceInterface
			virtual const std::string&          GetInstanceInterface()         { return Column(D3MetaRelation_InstanceInterface)->GetString(); }
			//! JSMetaClass
			virtual const std::string&          GetJSMetaClass()               { return Column(D3MetaRelation_JSMetaClass)->GetString(); }
			//! JSInstanceClass
			virtual const std::string&          GetJSInstanceClass()           { return Column(D3MetaRelation_JSInstanceClass)->GetString(); }
			//! JSParentViewClass
			virtual const std::string&          GetJSParentViewClass()         { return Column(D3MetaRelation_JSParentViewClass)->GetString(); }
			//! JSChildViewClass
			virtual const std::string&          GetJSChildViewClass()          { return Column(D3MetaRelation_JSChildViewClass)->GetString(); }
			//! Flags
			virtual long                        GetFlags()                     { return Column(D3MetaRelation_Flags)->GetLong(); }
			//! SwitchColumnID
			virtual long                        GetSwitchColumnID()            { return Column(D3MetaRelation_SwitchColumnID)->GetLong(); }
			//! SwitchColumnValue
			virtual const std::string&          GetSwitchColumnValue()         { return Column(D3MetaRelation_SwitchColumnValue)->GetString(); }
			//@}

			/*! @name Set Column Values
			*/
			//@{
			//! Set ID
			virtual bool												SetID(long val)                { return Column(D3MetaRelation_ID)->SetValue(val); }
			//! Set ParentKeyID
			virtual bool												SetParentKeyID(long val)       { return Column(D3MetaRelation_ParentKeyID)->SetValue(val); }
			//! Set ChildKeyID
			virtual bool												SetChildKeyID(long val)        { return Column(D3MetaRelation_ChildKeyID)->SetValue(val); }
			//! Set ParentEntityID
			virtual bool												SetParentEntityID(long val)    { return Column(D3MetaRelation_ParentEntityID)->SetValue(val); }
			//! Set SequenceNo
			virtual bool												SetSequenceNo(float val)       { return Column(D3MetaRelation_SequenceNo)->SetValue(val); }
			//! Set Name
			virtual bool												SetName(const std::string& val){ return Column(D3MetaRelation_Name)->SetValue(val); }
			//! Set ProsaName
			virtual bool												SetProsaName(const std::string& val){ return Column(D3MetaRelation_ProsaName)->SetValue(val); }
			//! Set Description
			virtual bool												SetDescription(const std::string& val){ return Column(D3MetaRelation_Description)->SetValue(val); }
			//! Set ReverseName
			virtual bool												SetReverseName(const std::string& val){ return Column(D3MetaRelation_ReverseName)->SetValue(val); }
			//! Set ReverseProsaName
			virtual bool												SetReverseProsaName(const std::string& val){ return Column(D3MetaRelation_ReverseProsaName)->SetValue(val); }
			//! Set ReverseDescription
			virtual bool												SetReverseDescription(const std::string& val){ return Column(D3MetaRelation_ReverseDescription)->SetValue(val); }
			//! Set MetaClass
			virtual bool												SetMetaClass(const std::string& val){ return Column(D3MetaRelation_MetaClass)->SetValue(val); }
			//! Set InstanceClass
			virtual bool												SetInstanceClass(const std::string& val){ return Column(D3MetaRelation_InstanceClass)->SetValue(val); }
			//! Set InstanceInterface
			virtual bool												SetInstanceInterface(const std::string& val){ return Column(D3MetaRelation_InstanceInterface)->SetValue(val); }
			//! Set JSMetaClass
			virtual bool												SetJSMetaClass(const std::string& val){ return Column(D3MetaRelation_JSMetaClass)->SetValue(val); }
			//! Set JSInstanceClass
			virtual bool												SetJSInstanceClass(const std::string& val){ return Column(D3MetaRelation_JSInstanceClass)->SetValue(val); }
			//! Set JSParentViewClass
			virtual bool												SetJSParentViewClass(const std::string& val){ return Column(D3MetaRelation_JSParentViewClass)->SetValue(val); }
			//! Set JSChildViewClass
			virtual bool												SetJSChildViewClass(const std::string& val){ return Column(D3MetaRelation_JSChildViewClass)->SetValue(val); }
			//! Set Flags
			virtual bool												SetFlags(long val)             { return Column(D3MetaRelation_Flags)->SetValue(val); }
			//! Set SwitchColumnID
			virtual bool												SetSwitchColumnID(long val)    { return Column(D3MetaRelation_SwitchColumnID)->SetValue(val); }
			//! Set SwitchColumnValue
			virtual bool												SetSwitchColumnValue(const std::string& val){ return Column(D3MetaRelation_SwitchColumnValue)->SetValue(val); }
			//@}

			//! A column accessor provided mainly for backwards compatibility
			virtual ColumnPtr										Column(D3MetaRelation_Fields eCol){ return Entity::GetColumn((unsigned int) eCol); }
	};



} // end namespace D3


#endif /* INC_D3MetaRelationBase_H */
