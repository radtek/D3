// MODULE: D3MetaEntityBase.cpp
//;
//; IMPLEMENTATION CLASS: D3MetaEntityBase
//;

// WARNING: This file has been generated by D3. You should NEVER change this file.
//          Please refer to the documentation of MetaEntity::CreateSpecialisedCPPHeader()
//          which explains in detail how you can regenerate this file.
//

#include "D3Types.h"

#include "D3MetaEntityBase.h"

// Dependent includes
//
#include "D3EntityPermissionBase.h"
#include "D3MetaColumnBase.h"
#include "D3MetaDatabaseBase.h"
#include "D3MetaKeyBase.h"
#include "D3MetaRelationBase.h"
#include "D3RowLevelPermissionBase.h"


namespace D3
{

	// =====================================================================================
	// Class D3MetaEntityBase Implementation
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3MetaEntityBase, Entity);


	// Get a collection reflecting all currently resident instances of this
	//
	/* static */
	InstanceKeyPtrSetPtr D3MetaEntityBase::GetAll(DatabasePtr pDB)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return NULL;

		return pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetPrimaryMetaKey()->GetInstanceKeySet(pDatabase);
	}



	// Make all objects of this type memory resident
	//
	/* static */
	void D3MetaEntityBase::LoadAll(DatabasePtr pDB, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return;

		pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->LoadAll(pDatabase, bRefresh, bLazyFetch);
	}



	// Make a specific instance resident
	//
	/* static */
	D3MetaEntityPtr D3MetaEntityBase::Load(DatabasePtr pDB, long lID, bool bRefresh, bool bLazyFetch)
	{
		DatabasePtr		pDatabase = pDB;


		if (!pDatabase)
			return NULL;

		if (pDatabase->GetMetaDatabase() != MetaDatabase::GetMetaDatabase("D3MDDB"))
			pDatabase = pDatabase->GetDatabaseWorkspace()->GetDatabase(MetaDatabase::GetMetaDatabase("D3MDDB"));

		if (!pDatabase)
			return NULL;

		TemporaryKey	tmpKey(*(pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetPrimaryMetaKey()));

		// Set all key column values
		//
		tmpKey.GetColumn(D3MDDB_D3MetaEntity_ID)->SetValue(lID);

		return (D3MetaEntityPtr) pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetPrimaryMetaKey()->LoadObject(&tmpKey, pDatabase, bRefresh, bLazyFetch);
	}



	// Get parent of relation D3MetaDatabase
	//
	D3MetaDatabasePtr D3MetaEntityBase::GetD3MetaDatabase()
	{
		RelationPtr		pRelation;

		pRelation = GetParentRelation(D3MDDB_D3MetaEntity_PR_D3MetaDatabase);

		if (!pRelation)
			return NULL;

		return (D3MetaDatabasePtr) pRelation->GetParent();
	}



	// Set parent of relation D3MetaDatabase
	//
	void D3MetaEntityBase::SetD3MetaDatabase(D3MetaDatabasePtr pParent)
	{
		SetParent(m_pMetaEntity->GetParentMetaRelation(D3MDDB_D3MetaEntity_PR_D3MetaDatabase), (EntityPtr) pParent);
	}



	// Load all instances of relation D3MetaColumns
	//
	void D3MetaEntityBase::LoadAllD3MetaColumns(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3MetaColumns));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3MetaColumns
	//
	D3MetaEntityBase::D3MetaColumns* D3MetaEntityBase::GetD3MetaColumns()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3MetaColumns));

		return (D3MetaEntityBase::D3MetaColumns*) pRelation;
	}



	// Load all instances of relation D3MetaKeys
	//
	void D3MetaEntityBase::LoadAllD3MetaKeys(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3MetaKeys));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3MetaKeys
	//
	D3MetaEntityBase::D3MetaKeys* D3MetaEntityBase::GetD3MetaKeys()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3MetaKeys));

		return (D3MetaEntityBase::D3MetaKeys*) pRelation;
	}



	// Load all instances of relation ChildD3MetaRelations
	//
	void D3MetaEntityBase::LoadAllChildD3MetaRelations(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_ChildD3MetaRelations));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation ChildD3MetaRelations
	//
	D3MetaEntityBase::ChildD3MetaRelations* D3MetaEntityBase::GetChildD3MetaRelations()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_ChildD3MetaRelations));

		return (D3MetaEntityBase::ChildD3MetaRelations*) pRelation;
	}



	// Load all instances of relation D3RolePermissions
	//
	void D3MetaEntityBase::LoadAllD3RolePermissions(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3RolePermissions));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3RolePermissions
	//
	D3MetaEntityBase::D3RolePermissions* D3MetaEntityBase::GetD3RolePermissions()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3RolePermissions));

		return (D3MetaEntityBase::D3RolePermissions*) pRelation;
	}



	// Load all instances of relation D3RowLevelPermissions
	//
	void D3MetaEntityBase::LoadAllD3RowLevelPermissions(bool bRefresh, bool bLazyFetch)
	{
		RelationPtr		pRelation = NULL;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3RowLevelPermissions));

		if (pRelation)
			pRelation->LoadAll(bRefresh, bLazyFetch);
	}



	// Get the relation D3RowLevelPermissions
	//
	D3MetaEntityBase::D3RowLevelPermissions* D3MetaEntityBase::GetD3RowLevelPermissions()
	{
		RelationPtr		pRelation;

		pRelation = GetChildRelation(m_pDatabase->GetMetaDatabase()->GetMetaEntity(D3MDDB_D3MetaEntity)->GetChildMetaRelation(D3MDDB_D3MetaEntity_CR_D3RowLevelPermissions));

		return (D3MetaEntityBase::D3RowLevelPermissions*) pRelation;
	}





	// =====================================================================================
	// Class D3MetaEntityBase::iterator Implementation
	//

	// De-reference operator*()
	//
	D3MetaEntityPtr D3MetaEntityBase::iterator::operator*()
	{
		InstanceKeyPtr pKey;
		EntityPtr      pEntity;

		pKey = (InstanceKeyPtr) ((InstanceKeyPtrSetItr*) this)->operator*();
		pEntity = pKey->GetEntity();

		return (D3MetaEntityPtr) pEntity;
	}



	// Assignment operator=()
	//
	D3MetaEntityBase::iterator& D3MetaEntityBase::iterator::operator=(const iterator& itr)
	{
		((InstanceKeyPtrSetItr*) this)->operator=(itr);

		return *this;
	}





	// =====================================================================================
	// Class D3MetaEntityBase::D3MetaColumns
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3MetaEntityBase::D3MetaColumns, Relation);

	// De-reference operator*()
	//
	D3MetaColumnPtr D3MetaEntityBase::D3MetaColumns::iterator::operator*()
	{
		return (D3MetaColumnPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3MetaEntityBase::D3MetaColumns::iterator& D3MetaEntityBase::D3MetaColumns::iterator::operator=(const iterator& itr)
	{
		return (D3MetaEntityBase::D3MetaColumns::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3MetaColumnPtr D3MetaEntityBase::D3MetaColumns::front()
	{
		return (D3MetaColumnPtr) Relation::front();
	}



	// back() method
	//
	D3MetaColumnPtr D3MetaEntityBase::D3MetaColumns::back()
	{
		return (D3MetaColumnPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3MetaEntityBase::D3MetaKeys
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3MetaEntityBase::D3MetaKeys, Relation);

	// De-reference operator*()
	//
	D3MetaKeyPtr D3MetaEntityBase::D3MetaKeys::iterator::operator*()
	{
		return (D3MetaKeyPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3MetaEntityBase::D3MetaKeys::iterator& D3MetaEntityBase::D3MetaKeys::iterator::operator=(const iterator& itr)
	{
		return (D3MetaEntityBase::D3MetaKeys::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3MetaKeyPtr D3MetaEntityBase::D3MetaKeys::front()
	{
		return (D3MetaKeyPtr) Relation::front();
	}



	// back() method
	//
	D3MetaKeyPtr D3MetaEntityBase::D3MetaKeys::back()
	{
		return (D3MetaKeyPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3MetaEntityBase::ChildD3MetaRelations
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3MetaEntityBase::ChildD3MetaRelations, Relation);

	// De-reference operator*()
	//
	D3MetaRelationPtr D3MetaEntityBase::ChildD3MetaRelations::iterator::operator*()
	{
		return (D3MetaRelationPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3MetaEntityBase::ChildD3MetaRelations::iterator& D3MetaEntityBase::ChildD3MetaRelations::iterator::operator=(const iterator& itr)
	{
		return (D3MetaEntityBase::ChildD3MetaRelations::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3MetaRelationPtr D3MetaEntityBase::ChildD3MetaRelations::front()
	{
		return (D3MetaRelationPtr) Relation::front();
	}



	// back() method
	//
	D3MetaRelationPtr D3MetaEntityBase::ChildD3MetaRelations::back()
	{
		return (D3MetaRelationPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3MetaEntityBase::D3RolePermissions
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3MetaEntityBase::D3RolePermissions, Relation);

	// De-reference operator*()
	//
	D3EntityPermissionPtr D3MetaEntityBase::D3RolePermissions::iterator::operator*()
	{
		return (D3EntityPermissionPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3MetaEntityBase::D3RolePermissions::iterator& D3MetaEntityBase::D3RolePermissions::iterator::operator=(const iterator& itr)
	{
		return (D3MetaEntityBase::D3RolePermissions::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3EntityPermissionPtr D3MetaEntityBase::D3RolePermissions::front()
	{
		return (D3EntityPermissionPtr) Relation::front();
	}



	// back() method
	//
	D3EntityPermissionPtr D3MetaEntityBase::D3RolePermissions::back()
	{
		return (D3EntityPermissionPtr) Relation::back();
	}





	// =====================================================================================
	// Class D3MetaEntityBase::D3RowLevelPermissions
	//

	// D3 class factory support for this class
	//
	D3_CLASS_IMPL(D3MetaEntityBase::D3RowLevelPermissions, Relation);

	// De-reference operator*()
	//
	D3RowLevelPermissionPtr D3MetaEntityBase::D3RowLevelPermissions::iterator::operator*()
	{
		return (D3RowLevelPermissionPtr) ((Relation::iterator*) this)->operator*();
	}



	// Assignment operator=()
	//
	D3MetaEntityBase::D3RowLevelPermissions::iterator& D3MetaEntityBase::D3RowLevelPermissions::iterator::operator=(const iterator& itr)
	{
		return (D3MetaEntityBase::D3RowLevelPermissions::iterator&) ((Relation::iterator*) this)->operator=(itr);
	}



	// front() method
	//
	D3RowLevelPermissionPtr D3MetaEntityBase::D3RowLevelPermissions::front()
	{
		return (D3RowLevelPermissionPtr) Relation::front();
	}



	// back() method
	//
	D3RowLevelPermissionPtr D3MetaEntityBase::D3RowLevelPermissions::back()
	{
		return (D3RowLevelPermissionPtr) Relation::back();
	}




} // end namespace D3
